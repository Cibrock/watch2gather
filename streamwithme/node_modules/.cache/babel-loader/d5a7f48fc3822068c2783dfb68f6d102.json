{"ast":null,"code":"import _slicedToArray from \"D:\\\\Hochschule Anhalt\\\\WuB\\\\streamwithme\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\n\nfunction queriesDidChange(prevQueries, nextQueries) {\n  if (nextQueries === prevQueries) return false;\n  var nextQueriesArr = Object.values(nextQueries);\n  var prevQueriesArr = Object.values(prevQueries);\n  if (nextQueriesArr.length !== prevQueriesArr.length) return true;\n  if (nextQueriesArr.some(function (q, i) {\n    return q !== prevQueriesArr[i];\n  })) return true;\n  var prevKeys = Object.keys(prevQueries);\n  return Object.keys(nextQueries).some(function (n, i) {\n    return n !== prevKeys[i];\n  });\n}\n\nfunction _ref(curr, key) {\n  curr.matches[key] = false;\n  curr.mediaQueries[key] = {};\n  return curr;\n}\n\nfunction init(queries) {\n  var queryKeys = Object.keys(queries);\n  /* istanbul ignore next */\n\n  if (typeof window === 'undefined') return queryKeys.reduce(_ref, {\n    mediaQueries: {},\n    matches: {}\n  });\n  return queryKeys.reduce(function (state, name) {\n    var mql = window.matchMedia(queries[name]);\n    state.mediaQueries[name] = mql;\n    state.matches[name] = mql.matches;\n    return state;\n  }, {\n    mediaQueries: {},\n    matches: {}\n  });\n}\n\nfunction reducer(state, action) {\n  function _ref2(prev, key) {\n    prev[key] = state.mediaQueries[key].matches;\n    return prev;\n  }\n\n  switch (action.type) {\n    case 'updateMatches':\n      return {\n        matches: Object.keys(state.mediaQueries).reduce(_ref2, {}),\n        mediaQueries: state.mediaQueries\n      };\n\n    case 'setQueries':\n      return init(action.queries);\n  }\n}\n/**\r\n * A hook that returns a [`MediaQueryMatches`](#mediaquerymatches) object which will\r\n * tell you if specific media queries matched, all media queries matched, or\r\n * any media queries matched. Matches in this hook will always return `false` when\r\n * rendering on the server.\r\n *\r\n * @param queryMap The media queries you want to match against e.g. `{screen: \"screen\", width: \"(min-width: 12em)\"}`\r\n */\n\n\nexport function useMediaQueries(queryMap) {\n  var prevQueries = React.useRef(queryMap);\n\n  var _React$useReducer = React.useReducer(reducer, queryMap, init),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  React.useEffect(function () {\n    if (queriesDidChange(queryMap, prevQueries.current)) {\n      dispatch({\n        type: 'setQueries',\n        queries: queryMap\n      });\n      prevQueries.current = queryMap;\n    }\n  }, [queryMap]);\n\n  function _ref3() {\n    return dispatch({\n      type: 'updateMatches'\n    });\n  }\n\n  function _ref4(mq) {\n    var callback = _ref3;\n    if (typeof mq.addListener !== 'undefined') mq.addListener(callback);else mq.addEventListener('change', callback);\n    return callback;\n  }\n\n  React.useEffect(function () {\n    var queries = Object.values(state.mediaQueries);\n    var callbacks = queries.map(_ref4);\n\n    function _ref5(mq, i) {\n      if (typeof mq.addListener !== 'undefined') mq.removeListener(callbacks[i]);else mq.removeEventListener('change', callbacks[i]);\n    }\n\n    return function () {\n      queries.forEach(_ref5);\n    };\n  }, [state.mediaQueries]);\n  var matches = state.matches;\n  var matchValues = React.useMemo(function () {\n    return Object.values(matches);\n  }, [matches]);\n  return {\n    matches: matches,\n    matchesAny: matchValues.some(Boolean),\n    matchesAll: matchValues.length > 0 && matchValues.every(Boolean)\n  };\n}\n/**\r\n * A hook that returns `true` if the media query matched and `false` if not. This\r\n * hook will always return `false` when rendering on the server.\r\n *\r\n * @param query The media query you want to match against e.g. `\"only screen and (min-width: 12em)\"`\r\n */\n\nexport function useMediaQuery(query) {\n  return useMediaQueries(getObj(query)).matchesAll;\n}\nvar cache = {};\n\nfunction getObj(query) {\n  if (cache[query] === void 0) cache[query] = {\n    default: query\n  };\n  return cache[query];\n}","map":null,"metadata":{},"sourceType":"module"}