{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Viktor\\\\Documents\\\\Studium\\\\WuM\\\\Watch2Gether\\\\streamwithme\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Viktor\\\\Documents\\\\Studium\\\\WuM\\\\Watch2Gether\\\\streamwithme\\\\src\\\\components\\\\ChatMessage.js\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { eventState } from \"./EventHandler\";\nimport \"./styles/ChatMessage.css\";\n/* \r\nHier werden die Nachrichten aus API sinnvoll dargestellt.\r\nDie Zeit ist auf die Stunden und Minuten gekürzt.\r\n(Die Zeitzone definiert Herr Barths Server, welche 3 Stunden nachgeht.)\r\nDa Räume als flüchtig konzipiert sind, entfällt das Datum.\r\nDurch den accessibility Span liest der Screenreader neue Nachrichten vor.\r\n */\n\nvar ChatMessage = React.forwardRef(function (props, ref) {\n  var _useState = useState(props.text),\n      _useState2 = _slicedToArray(_useState, 1),\n      text = _useState2[0];\n\n  var propTime = props.time;\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      time = _useState4[0],\n      setTime = _useState4[1];\n\n  var _useState5 = useState(props.name),\n      _useState6 = _slicedToArray(_useState5, 1),\n      name = _useState6[0];\n\n  useEffect(function () {\n    if (time !== undefined) return;\n    eventState.set(\"NewMessage\");\n    var date = new Date(null);\n    date.setMilliseconds(propTime);\n    setTime(date.toISOString().substring(11, 16));\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"messages\",\n    role: \"listitem\",\n    ref: ref,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"messageTime\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }, time), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"messageUser\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }, name, \":\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"messageText\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, text));\n});\nexport default ChatMessage;","map":{"version":3,"names":["React","useEffect","useState","eventState","ChatMessage","forwardRef","props","ref","text","propTime","time","setTime","name","undefined","set","date","Date","setMilliseconds","toISOString","substring"],"sources":["C:/Users/Viktor/Documents/Studium/WuM/Watch2Gether/streamwithme/src/components/ChatMessage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { eventState } from \"./EventHandler\";\r\nimport \"./styles/ChatMessage.css\";\r\n/* \r\nHier werden die Nachrichten aus API sinnvoll dargestellt.\r\nDie Zeit ist auf die Stunden und Minuten gekürzt.\r\n(Die Zeitzone definiert Herr Barths Server, welche 3 Stunden nachgeht.)\r\nDa Räume als flüchtig konzipiert sind, entfällt das Datum.\r\nDurch den accessibility Span liest der Screenreader neue Nachrichten vor.\r\n */\r\nconst ChatMessage = React.forwardRef((props,ref) => {\r\n    const [text] = useState(props.text);\r\n    const propTime = props.time\r\n    const [time, setTime] = useState();\r\n    const [name] = useState(props.name);\r\n\r\n    useEffect(() => {\r\n        if (time !== undefined) return;\r\n        eventState.set(\"NewMessage\");\r\n        const date = new Date(null);\r\n        date.setMilliseconds(propTime);\r\n        setTime(date.toISOString().substring(11, 16));\r\n    });\r\n\r\n    return (\r\n        <div className=\"messages\" role=\"listitem\" ref={ref}>\r\n            <span className=\"messageTime\">{time}</span>\r\n            <span className=\"messageUser\">{name}:</span>\r\n            <span className=\"messageText\">{text}</span>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default ChatMessage;"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,gBAA3B;AACA,OAAO,0BAAP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,WAAW,GAAGJ,KAAK,CAACK,UAAN,CAAiB,UAACC,KAAD,EAAOC,GAAP,EAAe;EAAA,gBACjCL,QAAQ,CAACI,KAAK,CAACE,IAAP,CADyB;EAAA;EAAA,IACzCA,IADyC;;EAEhD,IAAMC,QAAQ,GAAGH,KAAK,CAACI,IAAvB;;EAFgD,iBAGxBR,QAAQ,EAHgB;EAAA;EAAA,IAGzCQ,IAHyC;EAAA,IAGnCC,OAHmC;;EAAA,iBAIjCT,QAAQ,CAACI,KAAK,CAACM,IAAP,CAJyB;EAAA;EAAA,IAIzCA,IAJyC;;EAMhDX,SAAS,CAAC,YAAM;IACZ,IAAIS,IAAI,KAAKG,SAAb,EAAwB;IACxBV,UAAU,CAACW,GAAX,CAAe,YAAf;IACA,IAAMC,IAAI,GAAG,IAAIC,IAAJ,CAAS,IAAT,CAAb;IACAD,IAAI,CAACE,eAAL,CAAqBR,QAArB;IACAE,OAAO,CAACI,IAAI,CAACG,WAAL,GAAmBC,SAAnB,CAA6B,EAA7B,EAAiC,EAAjC,CAAD,CAAP;EACH,CANQ,CAAT;EAQA,oBACI;IAAK,SAAS,EAAC,UAAf;IAA0B,IAAI,EAAC,UAA/B;IAA0C,GAAG,EAAEZ,GAA/C;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACI;IAAM,SAAS,EAAC,aAAhB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAA+BG,IAA/B,CADJ,eAEI;IAAM,SAAS,EAAC,aAAhB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAA+BE,IAA/B,MAFJ,eAGI;IAAM,SAAS,EAAC,aAAhB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAA+BJ,IAA/B,CAHJ,CADJ;AAOH,CArBmB,CAApB;AAuBA,eAAeJ,WAAf"},"metadata":{},"sourceType":"module"}